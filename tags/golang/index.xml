<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Skyscraper</title><link>https://qmdx00.cn/tags/golang/</link><description>Recent content in Golang on Skyscraper</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 04 Mar 2021 17:40:09 +0800</lastBuildDate><atom:link href="https://qmdx00.cn/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Container</title><link>https://qmdx00.cn/posts/golang-container/</link><pubDate>Thu, 04 Mar 2021 17:40:09 +0800</pubDate><guid>https://qmdx00.cn/posts/golang-container/</guid><description>container list package main import ( &amp;#34;container/list&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { var l list.List l.PushBack(1) l.PushBack(2) l.PushBack(3) for e := l.Front(); e != nil; e = e.Next() { fmt.Println(e.Value) } } ring package main import ( &amp;#34;container/ring&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { r := ring.New(3) for i := 0; i &amp;lt; r.Len(); i++ { r.Value = i + 1 r = r.Next() } r.Do(func(v interface{}) { fmt.Println(v) }) } heap package main import ( &amp;#34;container/list&amp;#34; &amp;#34;fmt&amp;#34; ) type IntHeap []int func (h IntHeap) Len() int { return len(h) } func (h IntHeap) Less(i, j int) bool { return h[i] &amp;lt; h[j] } func (h IntHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *IntHeap) Push(x interface{}) { *h = append(*h, x.</description></item></channel></rss>